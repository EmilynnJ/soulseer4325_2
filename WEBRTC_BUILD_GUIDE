_______WEBRTC INSTRUCTIONS_________
 
Build a complete, production-ready custom WebRTC system from scratch for a psychic reading platform called SoulSeer. This system must include fully implemented frontend UI, backend logic, signaling, and real-time Stripe-based billing — with no placeholders or TODO comments. You must custom-code all RTC signaling and media handling WITHOUT relying on prebuilt RTC SDKs like Twilio, Agora, or LiveKit. USE vanilla WebRTC APIs (RTCPeerConnection, getUserMedia, ICE, SDP, etc).
 
Stack:
 
Frontend: React (Vite), TailwindCSS
 
Backend: Node.js + Express or API routes
 
Database: Neon
 
Payment: Stripe (Connect + Pay-per-minute billing)
 
Required Functionality — FULLY IMPLEMENTED:
 
1. Roles & Routing
 
 
Implement secure login for "client" and "reader" roles
 
Role-based routing and conditional rendering
 
2. Session Flow
 
 
A client can view available readers and request a session
 
When a reader accepts, create a secure unique RTC room
 
Run pre-call checks (camera, mic access, browser compatibility)
 
Start video/audio session using WebRTC (custom signaling)
 
Use WebSocket or Socket.io for signaling channel
 
3. Media Control
 
 
Local/remote video streams with mute/camera toggle
 
Detect disconnection and reconnect flow
 
End session for both users if call drops or client balance hits zero
 
4. Real-Time Billing (Stripe)
 
 
On session start, begin a per-minute billing timer
 
Charge client via Stripe every minute (or in 5-sec increments for testing)
 
Pause billing if connection drops
 
End session automatically if client balance < reader’s rate
 
Store sessions in Firebase dawith fields: reader_id, client_id, session_id, start_time, end_time, total_minutes, amount_charged
 
5. UI (NO PLACEHOLDERS)
 
 
Video call UI with timers, controls, names, rates, and balance
 
Full chat box with live text exchange
 
Pre-session screen (waiting on reader) and post-session summary
 
6. Live Streaming with Gifting (Bonus)
 
 
Implement separate live stream room for readers
 
Clients can watch, chat, and send gifts (Stripe microtransactions)
 
Reader dashboard displays earnings from gifts and viewer count
 
Animate gifts on screen and update balance in real time
 
Important:
 
Do not assume an existing RTC SDK. Build full signaling logic (ICE, STUN/TURN, SDP exchange)
 
Do not write “insert UI here” — build real, styled UI with Tailwind
 
Do not stub or skip Stripe logic — implement full payment timer and transaction code
 
Backend should manage auth, signaling, billing, session logs, and Stripe
 
Every component and API must be functional, real, and tested